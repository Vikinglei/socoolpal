// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package cn.adouming.apal;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.view.Window;
import android.view.WindowManager;
import android.os.PowerManager;
import android.widget.TextView;
import android.view.Menu;   
import android.view.MenuItem;  
import org.socool.pal.R;

public class MainActivity extends Activity {
	public static final int SAVE = Menu.FIRST;   
    public static final int RETURN_MENU = Menu.FIRST+1;   
    public static final int QUIT = Menu.FIRST+2;  
    @Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// fullscreen mode
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				   WindowManager.LayoutParams.FLAG_FULLSCREEN); 

		TextView tv = new TextView(this);
		tv.setText("Initializing");
		setContentView(tv);
		downloader = new DataDownloader(this, tv);
	}
	@Override  
    public boolean onCreateOptionsMenu(Menu menu) {   
        menu.add(0,SAVE,0,"保存");   
        menu.add(0,RETURN_MENU,1,"返回主菜单");   
        menu.add(0,QUIT,2,"退出");   
        return super.onCreateOptionsMenu(menu);   
           
    }
	@Override  
    public boolean onOptionsItemSelected(MenuItem item) {   
         
        switch(item.getItemId()){   
            case SAVE:
            	//tv.setText("保存按钮被点击");
            	break;   
            case RETURN_MENU:
            	//tv.setText("返回主菜单按钮被点击");
            	break;   
            case QUIT:
            	//tv.setText("退出按钮被点击");
            	break;   
        }   
        return super.onOptionsItemSelected(item);   
    }   

	public void initSDL()
	{
		mLoadLibraryStub = new LoadLibrary();
		mAudioThread = new AudioThread(this);
		mGLView = new DemoGLSurfaceView(this);
		mGLView.setCallBack( mAudioThread );
		setContentView(mGLView);
		// Receive keyboard events
		mGLView.setFocusableInTouchMode(true);
		mGLView.setFocusable(true);
		mGLView.requestFocus();
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, Globals.ApplicationName);
		wakeLock.acquire();
	}

	@Override
	protected void onPause() {
		// TODO: if application pauses it's screen is messed up
		if( wakeLock != null )
			wakeLock.release();
		super.onPause();
		if( mGLView != null )
			mGLView.onPause();
	}

	@Override
	protected void onResume() {
		if( wakeLock != null )
			wakeLock.acquire();
		super.onResume();
		if( mGLView != null )
			mGLView.onResume();
	}

	@Override
	protected void onStop() 
	{
		if( wakeLock != null )
			wakeLock.release();
		
		if( mGLView != null )
			mGLView.exitApp();
		super.onStop();
		finish();
	}

	@Override
	public boolean onKeyDown(int keyCode, final KeyEvent event) {
		// Overrides Back key to use in our app
		 
		 if( keyCode == KeyEvent.KEYCODE_BACK && !downloader.DownloadComplete )
			 onStop();
		 else if( keyCode == KeyEvent.KEYCODE_MENU)
		 {
			 
		 }
		 else
		 {
			 if( mGLView != null )
				 mGLView.nativeKey( keyCode, 1 );
		 }
		 return true;
	 }
	
	@Override
	public boolean onKeyUp(int keyCode, final KeyEvent event) {
		 if( keyCode != KeyEvent.KEYCODE_MENU && mGLView != null )
			 mGLView.nativeKey( keyCode, 0 );
		 return true;
	 }

	private DemoGLSurfaceView mGLView = null;
	private LoadLibrary mLoadLibraryStub = null;
	private AudioThread mAudioThread = null;
	private PowerManager.WakeLock wakeLock = null;
	private DataDownloader downloader = null;

}
